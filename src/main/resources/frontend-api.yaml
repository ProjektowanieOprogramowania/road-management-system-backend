openapi: 3.0.3
info:
  title: Read management system Frontend API
  description: Read management system Frontend API
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /charges/passing/{userUUID}:
    get:
      operationId: getNotPaidPassingCharges
      tags:
        - PassingCharges
      summary: Get users not payed passing charges
      description: Get users not payed passing charges
      parameters:
        - name: userUUID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          example: 4d312962-5bbf-11ed-9b6a-0242ac120002
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PassingCharge'
  /charges/passing/{passingChargeId}/payment/{paymentMethod}:
    post:
      operationId: payPassingCharge
      tags:
        - PassingCharges
      summary: Pay PassingCharge
      description: Pay PassingCharge
      parameters:
        - name: passingChargeId
          description: PassingCharge id
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: paymentMethod
          description: Payment method
          in: path
          schema:
            type: string
            format: PaymentMethod
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: Payment URL
        404:
          description: Not found

  /charges/passing/subscription/{userUUID}:
    get:
      operationId: getSubscriptions
      tags:
        - Subscriptions
      summary: Get user's subscriptions
      parameters:
        - name: userUUID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          example: cc2cb489-146c-4482-b290-1b4d00220b08
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
  /charges/passing/subscription/payment/{paymentMethod}:
    post:
      operationId: buySubscription
      tags:
        - Subscriptions
      summary: Buy subscription
      parameters:
        - name: paymentMethod
          description: Payment method
          in: path
          schema:
            type: string
            format: PaymentMethod
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        400:
          description: Bad request

  /charges/payment/{paymentId}:
    get:
      operationId: getPayment
      tags:
        - Charges
      summary: Get payment
      parameters:
        - name: paymentId
          in: path
          schema:
            type: number
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: Bad request

  /charges/history/{userUUID}:
    get:
      operationId: getUsersCharges
      tags:
        - Charges
      summary: Get fees history
      description: Get fees history
      parameters:
        - name: userUUID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Charge'



  /charges/penalty/{userUUID}:
    get:
      operationId: getAllPenalties
      tags:
        - Penalties
      summary: Get user's penalties
      description: Get user's penalties
      parameters:
        - name: userUUID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PenaltyCharge'
        404:
          description: Not found

  /roads:
    get:
      operationId: getAllRoads
      tags:
        - Roads
      summary: Get all roads
      description: Get all roads
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Road'
    post:
      operationId: addRoad
      tags:
        - Roads
      summary: Add road
      description: Add road
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Road'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Road'
        400:
          description: Bad request

  /roads/{roadId}:
    get:
      operationId: getRoad
      tags:
        - Roads
      summary: Get particular road
      description: Get particular road
      parameters:
        - name: roadId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Road'
        404:
          description: Not found

    put:
      operationId: updateRoad
      tags:
        - Roads
      summary: Update road
      description: Update road
      parameters:
        - name: roadId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Road'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Road'
        404:
          description: Not found
        400:
          description: Bad request

    delete:
      operationId: deleteRoad
      tags:
        - Roads
      summary: Delete road
      description: Delete road
      parameters:
        - name: roadId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
        404:
          description: Not found

  /tariff:
    get:
      operationId: getAllTariffs
      tags:
        - Tariffs
      summary: Get all tariffs
      description: Get all tariffs
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TariffSimplified'

    post:
      operationId: addTariff
      tags:
        - Tariffs
      summary: Add tariff
      description: Add tariff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tariff'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
        400:
          description: Bad request

  /tariff/{tariffId}:
    get:
      operationId: getTariff
      tags:
        - Tariffs
      summary: Get particular tariff
      description: Get particular tariff
      parameters:
        - name: tariffId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
        404:
          description: Not found

    put:
      operationId: updateTariff
      tags:
        - Tariffs
      summary: Update tariff
      description: Update tariff
      parameters:
        - name: tariffId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tariff'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
        404:
          description: Not found
        400:
          description: Bad request

    delete:
      operationId: deleteTariff
      tags:
        - Tariffs
      summary: Delete tariff
      description: Delete tariff
      parameters:
        - name: tariffId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
        404:
          description: Not found
        409:
          description: Conflict - there are objects using this object

  /cameras:
    post:
      operationId: addCameraStream
      tags:
        - CameraStream
      summary: Add camera stream
      description: Add camera stream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraStream'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraStream'
        400:
          description: Bad request

  /cameras/{cameraId}:
    get:
      operationId: getCameraStream
      tags:
        - CameraStream
      summary: Get camera stream by ID
      description: Get camera stream by ID
      parameters:
        - name: cameraId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraStream'
        404:
          description: Not found

  /cameras/by-voivodeship/{voivodeship}:
    get:
      operationId: getCameraStreamsByVoivodeship
      tags:
        - CameraStream
      summary: Get camera streams by voivodeship
      description: Get camera streams by voivodeship
      parameters:
        - name: voivodeship
          in: path
          schema:
            $ref: '#/components/schemas/Voivodeship'
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CameraStream'
        400:
          description: Bad Request

  /sensors:
    get:
      operationId: getAllSensors
      tags:
        - Sensors
      summary: Get all sensors
      description: Get all sensors
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
    post:
      operationId: addSensor
      tags:
        - Sensors
      summary: Add sensor
      description: Add sensor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sensor'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
        400:
          description: Bad request

  /roadnode:
    get:
      operationId: getAllRoadNodes
      tags:
        - RoadNodes
      summary: Get all road nodes
      description: Get all road nodes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoadNode'

    post:
      operationId: addRoadNodes
      tags:
        - RoadNodes
      summary: Add many road nodes
      description: Add many road nodes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoadNode'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoadNode'
        400:
          description: Bad request

  /roadnode/{roadNodeId}:
    get:
      operationId: getRoadNode
      tags:
        - RoadNodes
      summary: Get particular road node
      description: Get particular road node
      parameters:
        - name: roadNodeId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadNode'
        404:
          description: Not found

    put:
      operationId: updateRoadNode
      tags:
        - RoadNodes
      summary: Update road node
      description: Update road node
      parameters:
        - name: roadNodeId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoadNode'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadNode'
        404:
          description: Not found
        400:
          description: Bad request

    delete:
      operationId: deleteRoadNode
      tags:
        - RoadNodes
      summary: Delete road node
      description: Delete road node
      parameters:
        - name: roadNodeId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
        404:
          description: Not found
        409:
          description: Conflict - there are road segments using this road node. Delete road segments first.

  /roadsegment:
    get:
      operationId: getAllRoadSegments
      tags:
        - RoadSegments
      summary: Get all road segments
      description: Get all road segments
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoadSegment'

    post:
      operationId: addRoadSegments
      tags:
        - RoadSegments
      summary: Add many road segments
      description: Add many road segments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoadSegment'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoadSegment'
        400:
          description: Bad request

  /roadsegment/{roadSegmentId}:
    get:
      operationId: getRoadSegment
      tags:
        - RoadSegments
      summary: Get particular road segment
      description: Get particular road segment
      parameters:
        - name: roadSegmentId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadSegment'
        404:
          description: Not found

    put:
      operationId: updateRoadSegment
      tags:
        - RoadSegments
      summary: Update road segment
      description: Update road segment
      parameters:
        - name: roadSegmentId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoadSegment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadSegment'
        404:
          description: Not found
        400:
          description: Bad request

    delete:
      operationId: deleteRoadSegment
      tags:
        - RoadSegments
      summary: Delete road segment
      description: Delete road segment
      parameters:
        - name: roadSegmentId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
        404:
          description: Not found
        409:
          description: Conflict - there are objects using this object
  /auctions:
    get:
      operationId: getAllAuctions
      tags:
        - Auctions
      description: Returns all auctions
      summary: Returns all auctions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'
    post:
      operationId: createAuction
      tags:
        - Auctions
      description: Creates auction
      summary: Creates auction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'
    put:
      operationId: updateAuction
      tags:
        - Auctions
      description: Update auction
      summary: Update auction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'
  /auctions/{auctionId}:
    get:
      operationId: getAuctionById
      tags:
        - Auctions
      description: Get auction
      summary: Get auction
      parameters:
        - name: auctionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'

  /auctions/offers:
    get:
      operationId: getAllOffers
      tags:
        - AuctionOffer
      description: Returns all AuctionOffers
      summary: Returns all AuctionOffers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuctionOffer'
    post:
      operationId: createOffer
      tags:
        - AuctionOffer
      description: Create offer
      summary: Create offer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuctionOffer'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionOffer'
  /auctions/{auctionId}/offers:
    get:
      operationId: getAuctionOffers
      tags:
        - AuctionOffer
      summary: Get offers by auction
      description: Get offers by auction
      parameters:
        - name: auctionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuctionOffer'
        400:
          description: Bad Request
components:
  schemas:
    PassingCharge:
      type: object
      properties:
        id:
          type: integer
          format: int64
        passing:
          $ref: '#/components/schemas/Passing'
        charge:
          $ref: '#/components/schemas/Charge'
      required:
        - passing
        - charge

    Charge:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
          format: uuid
        description:
          type: string
        chargeType:
          type: string
          format: ChargeType
        amount:
          type: number
          format: double
          minimum: 0.0
        paid:
          type: boolean
        payment:
          $ref: '#/components/schemas/Payment'
      required:
        - userId
        - amount
        - paid

    ChargeType:
      type: string
      enum: [ penalty_charge, passing_charge, subscription_charge ]

    PaymentMethod:
      type: string
      enum: [ bank_transfer, blik, postal_order ]

    Payment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        amount:
          type: number
          format: double
          minimum: 0.01
        dateTime:
          type: string
          format: date-time
        paymentMethod:
          type: string
          format: PaymentMethod
      required:
        - amount
        - dateTime
        - paymentMethod

    Subscription:
      type: object
      properties:
        id:
          type: integer
          format: int64
        subscriberId:
          type: string
          format: uuid
        subscriptionFrom:
          type: string
          format: date
        subscriptionTo:
          type: string
          format: date
        roadsIds:
          type: array
          items:
            type: integer
            format: int64
        charge:
          $ref: '#/components/schemas/Charge'
      required:
        - subscriberId
        - from
        - to
        - roadsIds

    Road:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        subscriptionPriceForOneDay:
          type: number
          format: double
          minimum: 0.00
        segments:
          type: array
          items:
            $ref: '#/components/schemas/RoadSegment'
      required:
        - name
        - subscriptionPriceForOneDay

    Localization:
      type: object
      properties:
        id:
          type: integer
          format: int64
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
      required:
        - latitude
        - longitude

    VehicleType:
      type: string
      enum: [ car, truck, motorcycle, other ]

    Vehicle:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ownerUserId:
          type: string
          format: uuid
        vehicleType:
          type: string
          format: VehicleType
        make:
          type: string
        model:
          type: string
        productionYear:
          type: integer
          minimum: 1800
          maximum: 2050
        registrationNumber:
          type: string
        length:
          description: Length in meters
          type: number
          format: double
          minimum: 0.0
        width:
          description: Width in meters
          type: number
          format: double
          minimum: 0.0
        height:
          description: Height in meters
          type: number
          format: double
          minimum: 0.0
        weight:
          description: Weight in kilograms
          type: number
          format: double
          minimum: 0.0
        engineVolumeCm3:
          type: integer
          minimum: 0
      required:
        - vehicleType
        - make

    Passing:
      type: object
      properties:
        id:
          type: integer
          format: int64
        payable:
          type: boolean
        dateTime:
          type: string
          format: date-time
        localization:
          $ref: '#/components/schemas/Localization'
        vehicle:
          $ref: '#/components/schemas/Vehicle'
      required:
        - payable
        - dateTime
        - localization
        - vehicle

    PenaltyCharge:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        passing:
          $ref: '#/components/schemas/Passing'
        charge:
          $ref: '#/components/schemas/Charge'
        paid:
          type: boolean
      required:
        - passing
        - charge
        - paid

    Tariff:
      type: object
      properties:
        id:
          type: integer
          format: int64
        active:
          type: boolean
        name:
          type: string
        prices:
          type: object
          additionalProperties:
            type: number
            format: double
            minimum: 0.0
      required:
        - active
        - name
        - prices

    TariffSimplified:
      type: object
      properties:
        id:
          type: integer
          format: int64
        active:
          type: boolean
        name:
          type: string
      required:
        - active
        - name

    Voivodeship:
      type: string
      enum:
        - dolnoslaskie
        - kujawskopomorskie
        - lubelskie
        - lubuskie
        - lodzkie
        - malopolskie
        - mazowieckie
        - opolskie
        - podkarpackie
        - podlaskie
        - pomorskie
        - slaskie
        - swietokrzyskie
        - warminskomazurskie
        - wielkopolskie
        - zachodniopomorskie

    CameraStreamProtocol:
      type: string
      enum:
        - http

    CameraStream:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        localization:
          $ref: '#/components/schemas/Localization'
        voivodeship:
          $ref: '#/components/schemas/Voivodeship'
        url:
          type: string
        protocol:
          $ref: '#/components/schemas/CameraStreamProtocol'
      required:
        - name
        - localization
        - voivodeship
        - url
        - protocol

    SensorType:
      type: string
      enum:
        - traffic

    Sensor:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        localization:
          $ref: '#/components/schemas/Localization'
        voivodeship:
          $ref: '#/components/schemas/Voivodeship'
        serialNumber:
          type: string
        sensorType:
          $ref: '#/components/schemas/SensorType'
        enabled:
          type: boolean
        webhookUrl:
          type: string
      required:
        - name
        - localization
        - voivodeship
        - serialNumber
        - sensorType
        - enabled
        # webhookUrl is associated by backend

    RoadNode:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        localization:
          $ref: '#/components/schemas/Localization'
      required:
        - name
        - localization

    RoadSegment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startNode:
          $ref: '#/components/schemas/RoadNode'
        endNode:
          $ref: '#/components/schemas/RoadNode'
        tariff:
          $ref: '#/components/schemas/Tariff'
      required:
        - startNode
        - endNode
        # tariff may be null
    Auction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        isOpen:
          type: boolean
        staringPrice:
          type: number
          format: double
        localization:
          $ref: '#/components/schemas/Localization'
        name:
          type: string
        description:
          type: string
        number:
          type: integer
        dueDate:
          type: integer
          format: int64
        offers:
          type: array
          items:
            $ref: '#/components/schemas/AuctionOffer'
      required:
        - isOpen
    AuctionOffer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
          format: uuid
        amount:
          type: number
          format: double
        currency:
          type: string
          format: Currency

    Currency:
      type: string
      enum: [ pln, usd, eur ]